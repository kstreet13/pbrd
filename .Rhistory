counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = TRUE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
colormap <- function(counts, max = 3871, relative = FALSE){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 51)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = TRUE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
colormap <- function(counts, max = 3871, relative = FALSE){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 51)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
brewer.pal(11,'Spectral')[6:11]
pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
length(pal)
plot(1:50, col=pal, cex=3)
?brewer.pal
brewer.pal('Greens')
brewer.pal(name='Greens')
display.brewer.all()
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, palette='Greens'){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
pal <- brewer.pal(9, palette)[-1]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = length(pal)+1)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
max = 3871
b <- seq(log1p(1), log1p(max), length.out = length(pal)+1)
b
counts
gene='ThreePrimeTdTomato'
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
max(counts)
log1p(max(counts))
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, palette='Greens'){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
pal <- brewer.pal(9, palette)[-1]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = length(pal)+1)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, palette='Greens'){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
pal <- brewer.pal(9, palette)[-4:9]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = length(pal)+1)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, palette='Greens'){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
pal <- brewer.pal(9, palette)[4:9]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = length(pal)+1)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
plot(1:100, col=hsv((1:100)/100, 1,1))
abline(v=35)
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, hue=.35){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 30)
nz <- which(counts > 0)
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
counts
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
max
b <- seq(log1p(1), log1p(max), length.out = 30)
nz <- which(counts > 0)
b
log1p(max)
cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)
seq(1,0, length.out=30)
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, hue=.35){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, 1, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, hue=.35, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap'){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
cc
table(cc)
cc <- rep('grey80', length(counts))
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
hue=.35
sat=.9
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
table(cc)
range(log1p(counts))
log1p(max)
# feature plot
colormap <- function(counts, max = 3871, relative = FALSE, hue=.35, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap', hue = .35, sat = .9, ...){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1, ...)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE, hue = hue, sat = sat), cex = .5)
}
colormap <- function(counts, max = 3871, relative = FALSE, hue=.6, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap', hue = .6, sat = .9, ...){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1, ...)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE, hue = hue, sat = sat), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato', hue = .99)
colormap <- function(counts, max = 3871, relative = FALSE, hue=.6, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap', hue = .6, sat = .9, ...){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1, ...)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE, hue = hue, sat = sat), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato', hue = .6)
abline(v=.55)
abline(v=55)
colormap <- function(counts, max = 3871, relative = FALSE, hue=.56, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap', hue = .56, sat = .9, ...){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1, ...)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE, hue = hue, sat = sat), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato')
feature_plot(sce,'ThreePrimeTdTomato', hue = .99)
feature_plot(sce,'EGFP_bGHpA', hue = .35)
feature_plot(sce,'ThreePrimeTdTomato', hue = .99)
feature_plot(sce,'EGFP_bGHpA', hue = .35)
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
genes <- c(upgenes, which(rownames(sce) == "EGFP_bGHpA"),
which(rownames(sce) == "ThreePrimeTdTomato"))
genecol <- c(rep(4,length(upgenes)), 3, 2)
means <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean(assay(sce,'logcounts')[gID, which(sce$clus == clID)])
})
})
rownames(means) <- rowData(sce)$Symbol[genes]
pcts <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean((assay(sce,'logcounts')[gID, which(sce$clus == clID)] > 0))
})
})
rownames(pcts) <- rowData(sce)$Symbol[genes]
hc.genes <- hclust(dist(means))
hc.clus <- hclust(dist(t(means)))
means <- means[hc.genes$order, hc.clus$order]
pcts <- pcts[hc.genes$order, hc.clus$order]
genecol <- genecol[hc.genes$order]
#png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.75)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
#dev.off()
png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.75)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(clus)))
centers <- t(sapply(levels(clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(clus==clID),])
}))
legend('topright', legend=levels(clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(clus), col = pal, font=2)
dev.off()
png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:24, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:22){
barplot(table(clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(clus,sce$Sample))))
}
dev.off()
layout(1)
par(mar=c(5,4,4,2)+.1)
sce
sce$Sample
unique(sce$Sample)
sce$Sample <- factor(sce$Sample, levels = c('prd_1','pbrd_1'))
sce$Sample
idx1 <- which(sce$clus %in% c(1,13))
ds <- DESeqDataSetFromMatrix(countData = assay(sce,'counts')[,idx1],
colData = colData(sce)[idx1,],
design= ~ Sample)
require(DESeq2)
ds <- DESeqDataSetFromMatrix(countData = assay(sce,'counts')[,idx1],
colData = colData(sce)[idx1,],
design= ~ Sample)
resI <- DESeq(dsI)
res <- DESeq(ds)
res
results(res)
resultsNames(res)
tab <- results(res, name=resultsNames(res)[2])
tab
rownames(tab)[which(tab$padj < .05)]
hist(tab$padj)
hist(tab$padj, breaks=50)
?wilcox.test
?Wilcoxon
require(Seurat)
seu <- as.Seurat(sce)
seu
rm(seu)
sce
colData(sce)
?lm
?glm
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson(), offset = sce$nUMI[idx1])
assay(sce,'counts')[1,idx1]
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson(), offset = sce$nUMI[idx1])
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson())
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson)
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1])
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson)
summary(.Last.value)
names(.Last.value)
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson)
x <- .Last.value
x$offset
summary(x)
summary(x)$coefs
summary(x)$coefficient
summary(x)$coefficient[2,4]
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson)
return(summary(fit)$coefficient[2,4])
})
?offset
hist(pvals)
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1])
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1] + offset()sce$nUMI[idx1], family = poisson)
glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1] + offset(sce$nUMI[idx1]), family = poisson)
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson)
return(summary(fit)$coefficient[2,4])
})
hist(pvals)
hist(pvals,breaks=50)
