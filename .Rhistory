hc.clus <- hclust(dist(t(means)))
means <- means[hc.genes$order, hc.clus$order]
pcts <- pcts[hc.genes$order, hc.clus$order]
genecol <- genecol[hc.genes$order]
#png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
#dev.off()
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.5)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
#dev.off()
png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.5)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
dev.off()
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:20, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:length(unique(sce$clus))){
barplot(table(sce$clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(sce$clus,sce$Sample))))
}
dev.off()
layout(1)
par(mar=c(5,4,4,2)+.1)
png(filename = '~/Desktop/dots.png', width = 800, height = 1200, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.5)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/dots.png', width = 800, height = 1500, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.5)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/dots.png', width = 800, height = 1500, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.6)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/dots.png', width = 800, height = 1500, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/dots.png', width = 800, height = 1500, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.8)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
png(filename = '~/Desktop/dots.png', width = 800, height = 1500, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
require(rhdf5)
h5ls('~/Downloads/Adata-object_All.h5')
install.packages('loomR')
BiocManager::install('zellkonverter')
require(zellkonverter)
?readH5AD
x <- readH5AD('~/Downloads/Adata-object_All.h5')
x
x <- readH5AD('~/Downloads/Adata-object_All.h5')
AnnDataDependencies()
readH5AD('~/Downloads/Adata-object_All.h5')
BiocManager::install('basilisk')
x <- readH5AD('~/Downloads/Adata-object_All.h5')
remove.packages('reticulate')
install.packages('reticulate')
install.packages("reticulate")
require(reticulate)
require(zellkonverter)
x <- readH5AD('~/Downloads/Adata-object_All.h5')
x
corner(assay(x,'X'))
corner(assay(x,'normalized'))
corner(assay(x,'zscore'))
corner(assay(x,'X'))
corner(assay(x,'zscore')) - corner(assay(x,'X'))
x
plot(assay(x,'normalized')[1,])
hist(assay(x,'normalized')[1,])
hist(assay(x,'normalized')[2,])
hist(assay(x,'normalized')[3,])
hist(assay(x,'normalized')[4,])
hist(assay(x,'normalized')[5,])
ref <- x
rm(x)
head(colData(ref))
x
ref
plot(reducedDim(ref,'X_umap'))
require(Seurat)
?RunPCA
sce <- readRDS('data/sce.rds')
# png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
# dev.off()
table(sce$clus)
source('setup_2.R')
set.seed(1)
seu <- as.Seurat(sce)
seu <- FindNeighbors(seu, reduction = "mnn", dims = 1:25)
params <- data.frame(
alg = rep(2:4, each=6),
res = rep(c(.5,.6,.7,.8,.9,1), times=3)
)
clusMat <- sapply(1:nrow(params), function(i){
seu <- FindClusters(seu, algorithm = params$alg[i], resolution = params$res[i])
return(as.numeric(seu$seurat_clusters))
})
for(k in 4:10){
km <- kmeans(reducedDim(sce,'mnn')[,1:25], centers = k)
clusMat <- cbind(clusMat, km$cluster)
}
rm(km)
hc <- hclust(dist(reducedDim(sce,'mnn')[,1:25]))
for(k in 4:10){
clusMat <- cbind(clusMat, cutree(hc, k = k))
}
rm(hc)
big <- apply(clusMat,1,function(x){
apply(clusMat,1,function(y){
mean(x==y)
})
})
h <- hclust(as.dist(1-big))
# which clustering is most consistent with overall agreement?
diag(big) <- NA
within <- apply(clusMat,2,function(cl){
means <- sapply(unique(cl), function(clID){
idx <- which(cl == clID)
return(c(mean(big[idx,idx], na.rm=TRUE), length(idx)))
})
return(sum(means[1,]*means[2,]) / length(cl))
})
between <- apply(clusMat,2,function(cl){
means <- sapply(unique(cl), function(clID){
idx <- which(cl == clID)
return(c(mean(big[idx,-idx], na.rm=TRUE), length(idx)))
})
return(sum(means[1,]*means[2,]) / length(cl))
})
diag(big) <- 1
require(cluster)
d.all <- dist(reducedDim(sce,'mnn')[,1:25])
sil <- apply(clusMat,2,function(cl){
s <- silhouette(as.integer(cl), d.all)
return(mean(s[,'sil_width']))
})
rm(d.all)
require(dbscan)
nn <- kNN(reducedDim(sce,'mnn')[,1:25], k = 20)$id
locAg <- apply(clusMat,2,function(cl){
nnClus <- matrix(cl[nn], ncol=20)
return(mean(cl == nnClus))
})
rm(nn)
# plot(c(1,ncol(clusMat)), 0:1, col='white')
# points(within, col=4)
# points(between, col=2)
# abline(v = which.max(within - between))
# points(sil, col=3)
# points(locAg, col = 5)
# choose the winner
clus <- factor(clusMat[,which.max(within - between + locAg + sil)])
table(clus, sce$Sample)
# umap plot colored by cluster
sce$clus <- clus
# barplots showing breakdown of each cluster by sample
# table(clus, sce$Sample)
# save it, so I don't have to keep re-running all this
saveRDS(sce, file='data/sce.rds')
table(sce$clus)
# attempt to annotated PBRD data from public data (Jacob, et al. Developmental Cell, 2023)
require(zellkonverter)
ref <- readH5AD('~/Projects/pbrd/data/Jacob2023/Adata-object_All.h5')
# assays:
# zscore is based on X
# X is cut off at 10 (max)
# normalized is log1p(1e6 * CPM)
# possible cluster labels:
# HC_named, subclustering, subclustering_grouped
sce <- readRDS('data/sce.rds')
clus <- sce$clus
rm(sce)
require(DropletUtils)
sceFull <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
# check overlap
mean(rownames(ref) %in% rowData(sceFull)$Symbol)
mean(rowData(sceFull)$Symbol %in% rownames(ref))
require(SingleR)
assay(sceFull,'normalized') <- log1p(t(t(assay(sceFull,'counts'))/colSums(assay(sceFull,'counts'))) * 10000)
rownames(sceFull) <- rowData(sceFull)$Symbol
# by clusters
pred.clus <- SingleR(test = sceFull, ref = ref,
assay.type.test = 'normalized', assay.type.ref = 'normalized',
labels = ref$subclustering_grouped,
clusters = clus)
# by cells
pred.cell <- SingleR(test = sceFull, ref = ref,
assay.type.test = 'normalized', assay.type.ref = 'normalized',
labels = ref$subclustering_grouped)
pred.cell
table(pred.clus)
dim(pred.clus$scores)
dim(pred.cell$scores)
pred.clus
pred.clus$scores
dim(pred.clus$scores)
dim(pred.cell$scores)
pred.clus$labels
pred.clus
View(pred.clus)
View(pred.clus[,2:4])
cbind(pred.clus$labels, pred.clus$pruned.labels)
cbind(pred.clus$labels, pred.clus$pruned.labels, pred.clus$delta.next)
?SingleR
rownames(sce)
rownames(sceFull)
rownames(ref)
pred.cell
pred.cell$pruned.labels
table(pred.cell$pruned.labels)
sum(is.na(pred.cell$pruned.labels))
pred.clus
clus
clus.pred.lab <- pred.clus$labels[clus]
clus.pred.lab
cell.pred.lab <- pred.cell$labels
length(clus.pred.lab)
length(cell.pred.lab)
clus.pred.lab == cell.pred.lab
is.na(clus.pred.lab == cell.pred.lab)
sum(is.na(clus.pred.lab == cell.pred.lab))
clus.pred.lab == cell.pred.lab
mean(clus.pred.lab == cell.pred.lab)
mean(clus.pred.lab == cell.pred.lab)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(clus), pch=16)
sce <- readRDS('data/sce.rds')
rm(sceFull)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(1+(clus.pred.lab == cell.pred.lab)), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(clus.pred.lab == cell.pred.lab), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=1+(clus.pred.lab == cell.pred.lab), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=pred.clus$delta.next[clus], pch=16)
pred.clus$delta.next[clus]
plot(reducedDim(sce,'umap'),asp=1, col=colorby(pred.clus$delta.next[clus]), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(pred.cell$delta.next), pch=16)
hist(pred.cell$delta.next)
hist(pred.clus$delta.next)
plot(reducedDim(sce,'umap'),asp=1, col=1+(clus.pred.lab == cell.pred.lab), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=c(2,3)[1+(clus.pred.lab == cell.pred.lab)], pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
layout(matrix(1:2,nrow=2))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=c(2,3)[1+(clus.pred.lab == cell.pred.lab)], pch=16)
matrix(1:2,nrow=2)
matrix(1:2,ncol=2)
matrix(1:2,nrow=)
matrix(1:2,nrow=1)
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=c(2,3)[1+(clus.pred.lab == cell.pred.lab)], pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
plot(reducedDim(sce,'umap'),asp=1, col=c(1,3)[1+(clus.pred.lab == cell.pred.lab)], pch=16)
sapply(1:20, function(cl){ mean((clus.pred.lab == cell.pred.lab)[clus==cl]) })
sapply(1:20, function(cl){ mean(pred.cell$delta.next[clus==cl]) })
cell.pred.lab
x
x <- cell.pred.lab
x
p <- table(x)
p <- p[p > 0]
p
p <- p / length(x)
p
p <- p[p > 0]
-sum(p * log(p, base = base))
base = exp(1)
-sum(p * log(p, base = base))
rm(base)
rm(x)
rm(p)
# cluster level confidence estimates
entropy <- function(x, base = exp(1)){
p <- table(x)
p <- p / length(x)
p <- p[p > 0]
-sum(p * log(p, base = base))
}
# cluster level confidence estimates
entropy <- function(x, base = exp(1)){
p <- table(x)
p <- p / length(x)
p <- p[p > 0]
-sum(p * log(p, base = base))
}
df <- data.frame(
clus.delta = pred.clus$delta.next,
lab.agreement = sapply(1:20, function(cl){ mean((clus.pred.lab == cell.pred.lab)[clus==cl]) }),
cell.delta = sapply(1:20, function(cl){ mean(pred.cell$delta.next[clus==cl]) }),
cell.entropy = sapply(1:20, function(cl){ entropy(cell.pred.lab[clus==cl]) })
)
df
pairs(df)
pairs(df, col = 1+(df$cell.delta > .12))
pairs(df, col = 1+(df$cell.delta < .07))
pairs(df, col = 1+(df$cell.entropy < .07))
pairs(df, col = 1+(df$cell.entropy < .7))
which(df$cell.entropy < .7)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
which.max(table(clus.pred.lab))
names(which.max(table(clus.pred.lab)))
most.likely = sapply(1:20, function(cl){ names(which.max(cell.pred.lab[clus==cl])) })
warnings()
most.likely
cl=1
cell.pred.lab[clus==cl]
table(cell.pred.lab[clus==cl])
most.likely = sapply(1:20, function(cl){ names(which.max(table(cell.pred.lab[clus==cl]))) })
most.likely
max(table(cell.pred.lab[clus==cl]))
most.likely.pct <- sapply(1:20, function(cl){ max(table(cell.pred.lab[clus==cl])) / sum(clus==cl) })
most.likely
most.likely.pct
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
paste0(most.likely)
paste0(most.likely, ' (', most.likely.pct)
?format
format(100*most.likely.pct, nsmall=1)
format(100*most.likely.pct, digits=3)
paste0(most.likely, ' (', format(100*most.likely.pct, digits=3), '%)')
paste0(most.likely, ' (', format(100*most.likely.pct, digits=3), '%)', trim = TRUE)
paste0(most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)')
ref
ref$subclustering_grouped
levels(ref$subclustering_grouped)
paste(levels(ref$subclustering_grouped), collapse = ", ")
plot.new()
legend('left', col = pal, pch=16, bty='n',
legend = paste0(most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
#legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
plot.new()
legend('left', col = pal, pch=16, bty='n', cex=.75,
legend = paste0(most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16)
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
#legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
plot.new()
legend('left', col = pal, pch=16, bty='n', cex=.75,
legend = paste0(1:20, ': ',most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
#legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
plot.new()
legend('left', col = pal, pch=16, bty='n', cex=.75,
legend = paste0(1:20, ': ',most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
png(filename = '~/Desktop/umap.png', width = 2000, height = 1000, res=100)
layout(matrix(1:2, nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
#legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
plot.new()
legend('left', col = pal, pch=16, bty='n', cex=.75,
legend = paste0(1:20, ': ',most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
dev.off()
png(filename = '~/Desktop/umap.png', width = 2000, height = 1000, res=100)
layout(matrix(1:2, nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
#legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
plot.new()
legend('left', col = pal, pch=16, bty='n', cex=1.25,
legend = paste0(1:20, ': ',most.likely, ' (', format(100*most.likely.pct, digits=3, trim=TRUE), '%)'))
dev.off()
saveRDS(pred.cell, file='data/pred_labs_cell.rds')
