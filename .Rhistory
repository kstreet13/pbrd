ex <- exprs(gset)
ex
dim(ex)
gset
phenoData(gset)
as.data.frame(phenoData(gset))
phenoData(gset)
pd <- phenoData(gset)
names(pd)
colnames(pd)
pd$gender
as.matrix(pd)
as.DataFrame(pd)
as.data.frame.table(pd)
pd
View(pd)
pd@data
View(pd@data)
class(pd@data)
pd <- phenoData(gset)@data
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
title <- paste ("GSE40012", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
rm(list=ls())
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE36809", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE20346", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6947", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
require(slinghsot)
BiocManager::install('slingshot')
require(slingshot)
?embedCurves
data("slingshotExample")
rd <- slingshotExample$rd
cl <- slingshotExample$cl
pto <- slingshot(rd, cl, start.clus = '1')
rd2 <- cbind(rd[,2] + rnorm(nrow(rd)), -rd[,1] + rnorm(nrow(rd)))
pto.new <- embedCurves(pto, rd2)
pto.new
plot(rd2, col = cl, asp = 1)
lines(SlingshotDataSet(pto.new), lwd = 3)
lines(SlingshotDataSet(pto.new), type='l', col=2, lwd = 3)
sce <- readRDS('data/sce.rds')
# Pbrd is the experimental group and prd is the reference control group.
# We want to know what genes are altered in their expression in Pbrd in
# comparison to Prd, especially in the cells expressing EGFP and tdTomato.
# EGFP is listed as "EGFP_bGHpA" and TdTomato as "ThreePrimeTdTomato".
# cluster 1+13 and 6+8 are the two sets of clusters expressing EGFP and TdTomato
# do DE analysis (Pbrd vs. prd) within those pairs of clusters
sce$Sample <- factor(sce$Sample, levels = c('prd_1','pbrd_1'))
require(Seurat)
seu <- as.Seurat(sce)
seu <- NormalizeData(seu)
?FindMarkers
Idents(seu)
sce$Sample
de1 <- FindMarkers(seu,
cells.1 = which(sce$clus %in% c(1,13) & sce$Sample == 'prd_1'),
cells.2 = which(sce$clus %in% c(1,13) & sce$Sample == 'pbrd_1'))
de1 <- FindMarkers(seu, group.by = 'Sample')
?Idents
Idents(seu)
Idents(seu) <- 'Sample'
seu
Idents(seu)
Idents(seu) <- 'clus'
Idents(seu)
de1 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '1')
de1
FindMarkers
BiocManager::install('presto')
install.packages('presto')
de
de1
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13')
de6 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '6')
de8 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '8')
table(sce$clus,sce$Sample)
de1
all(rownames(de1) == rownames(de13))
dim(de1)
dim(de13)
overlap <- rownames(de1)[rownames(de1)%in%rownames(de13)]
overla
overlap
(de1$avg_log2FC)
de1[overlap,]
plot(de1[overlap,]$avg_log2FC, de13[overlap,]$avg_log2FC, asp=1)
abline(h=0)
abline(v=0)
hist(de1$p_val_adj)
hist(de1$p_val_adj,breaks=50)
hist(de13$p_val_adj,breaks=50)
hist(de6$p_val_adj,breaks=50)
idx1 <- which(sce$clus %in% c(1,13))
#glm(assay(sce,'counts')[1,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1])
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson)
return(summary(fit)$coefficient[2,4])
})
p <- p.adjust(pvals, method='fdr')
hist(p, breaks=50)
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1])
return(summary(fit)$coefficient[2,4])
})
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1], start=c(.5,.5))
return(summary(fit)$coefficient[2,4])
})
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = binomial, offset = sce$nUMI[idx1])
return(summary(fit)$coefficient[2,4])
})
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1])
return(summary(fit)$coefficient[2,4])
})
pvals <- sapply(1:nrow(sce), function(i){
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson(link="identity"), offset = sce$nUMI[idx1])
return(summary(fit)$coefficient[2,4])
})
hist(sce$nUMI[idx1])
min(sce$nUMI[idx1])
i=1
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1], start=c(1,0))
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson(link='identity'), offset = sce$nUMI[idx1], start=c(1,0))
warnings()
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = poisson, offset = sce$nUMI[idx1], start=c(1,1))
table(assay(sce,'counts')[i,idx1])
boxplot(log1p(assay(sce,'counts')[i,idx1])) ~ sce$Sample[idx1])
boxplot(log1p(assay(sce,'counts')[i,idx1]) ~ sce$Sample[idx1])
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = "poisson", offset = sce$nUMI[idx1], start=c(1,1))
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = "poisson", offset = sce$nUMI[idx1])
fit <- glm(assay(sce,'counts')[i,idx1] ~ sce$Sample[idx1], family = "poisson")
plot(sce$Sample[idx1],assay(sce,'counts')[i,idx1])
sce$Sample[idx1]
as.numeric(sce$Sample[idx1])
fit <- glm(assay(sce,'counts')[i,idx1] ~ as.numeric(sce$Sample[idx1]), family = "poisson", offset = sce$nUMI[idx1])
fit
rm(fit)
fit <- glm(assay(sce,'counts')[i,idx1] ~ as.numeric(sce$Sample[idx1]), family = "poisson", offset = sce$nUMI[idx1])
fit
assay(sce,'counts')[i,idx1]
require(DESeq2)
?DESeqDataSetFromMatrix
require(DESeq2)
ds <- DESeqDataSetFromMatrix(countData = assay(sce,'counts')[,idx1],
colData = colData(sce)[idx1],
design= ~ Sample)
assay(sce,'counts')[,idx1]
colData(sce)[idx1]
ds <- DESeqDataSetFromMatrix(countData = assay(sce,'counts')[,idx1],
colData = colData(sce)[idx1,],
design= ~ Sample)
res <- DESeq(ds)
tab <- results(res, name=resultsNames(res)[2])
tab
hist(tab$pvalue, breaks=50)
hist(tab$padj, breaks=50)
tab
padj <- p.adjust(tab$pvalue, method='fdr')
hist(padj, breaks=50)
de
de1
hist(de1$p_val_adj)
hist(de1$p_val_adj,breaks=50)
hist(de13$p_val_adj,breaks=50)
sum(de13$p_val_adj < .05)
sum(de1$p_val_adj < .05)
hist(de1$avg_log2FC[de1$p_val_adj < .05])
hist(de1$avg_log2FC[de1$p_val_adj < .05], breaks=50)
# volcano plot
plot(de1$avg_log2FC, -log10(de1$p_val_adj))
abline(h = -log10(.05), col=2, lty=2)
# volcano plot
volcano_plot <- function(fc, pval, max = 20, ...){
pval <- -log10(pval)
pval[pval > max] <- max
plot(fc, pval,)
}
volcano_plot(de1$avg_log2FC, de1$p_val_adj)
abline(h = -log10(.05), col=2, lty=2)
de1
head(de1)
assay(sce,'counts')['ENSMUSG00000039145',]
assay(sce,'counts')['ENSMUSG00000039145',sce$clus==1]
boxplot(assay(sce,'counts')['ENSMUSG00000039145',sce$clus==1] ~ sce$Sample[sce$clus==1])
head(de1)
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000039145',sce$clus==1]) ~ sce$Sample[sce$clus==1])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000092341',sce$clus==1]) ~ sce$Sample[sce$clus==1])
volcano_plot <- function(fc, pval, max = 20, ...){
pval <- -log10(pval)
pval[pval > max] <- max
plot(fc, pval,)
}
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1",
xlab = "log FC (Pbrd - Prd)")
abline(h = -log10(.05), col=2, lty=2)
# volcano plot
volcano_plot <- function(fc, pval, max = 20, ...){
pval <- -log10(pval)
pval[pval > max] <- max
plot(fc, pval, ...)
}
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1",
xlab = "log FC (Pbrd - Prd)")
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
table(sce$clus, sce$Sample)
volcano_plot(de6$avg_log2FC, de6$p_val_adj,
main = "Cluster 6", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
which.min(de13$avg_log2FC)
de13[321,]
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000056501',sce$clus==13]) ~ sce$Sample[sce$clus==13])
de13[de13$avg_log2FC > 6.9,]
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000019761',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000021219',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000045545',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000086503',sce$clus==13]) ~ sce$Sample[sce$clus==13])
de13[de13$p_val_adj < 1e-10,]
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000039145',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000022748',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000092341',sce$clus==13]) ~ sce$Sample[sce$clus==13])
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000035202',sce$clus==13]) ~ sce$Sample[sce$clus==13])
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
rowMeans(log1p(assay(sce,'counts')[,sce$clus==13 & sce$Sample=='pbrd_1']))
plot(rowMeans(log1p(assay(sce,'counts')[,sce$clus==1 & sce$Sample=='pbrd_1'])),
rowMeans(log1p(assay(sce,'counts')[,sce$clus==13 & sce$Sample=='pbrd_1'])))
abline(0,1)
plot(rowMeans(log1p(assay(sce,'counts')[,sce$clus==1 & sce$Sample=='prd_1'])),
rowMeans(log1p(assay(sce,'counts')[,sce$clus==13 & sce$Sample=='prd_1'])))
abline(0,1)
de13[321,]
head(de1)
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000039145',sce$clus==13]) ~ sce$Sample[sce$clus==13])
de13['ENSMUSG00000039145',]
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
boxplot(log1p(assay(sce,'counts')['ENSMUSG00000086503',sce$clus==13]) ~ sce$Sample[sce$clus==13])
plot(rowMeans(log1p(assay(sce,'counts')[,sce$clus==1])),
rowMeans(log1p(assay(sce,'counts')[,sce$clus==13])))
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13')
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
?FindMarkers
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13', test.use = 'wilcox_limma')
head(de13)
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13')
mean(assay(sce,'counts')[,sce$clus==1] == 0)
mean(assay(sce,'counts')[,sce$clus==13] == 0)
de13 <- FindMarkers(seu, ident.1 = 'prd_1', group.by = 'Sample', subset.ident = '13')
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13')
samp <- sce$Sample[sce$clus==13]
x = assay(sce,'counts')[1,sce$clus==13]
x
table(x == 0, samp)
table(x > 0, samp)
table(x > 0, samp)['TRUE',]
samp <- sce$Sample[sce$clus==13]
stat <- apply(assay(sce,'counts')[,sce$clus==13],1,function(x){
table(x > 0, samp)['TRUE',]
})
stat <- apply(assay(sce,'counts')[,sce$clus==13],1,function(x){
c(sum(x > 0 & samp=='prd_1'), sum(x > 0 & samp=='pbrd_1'))
})
stat
stat = t(stat)
stat
samp <- sce$Sample[sce$clus==1]
samp <- sce$Sample[sce$clus==13]
stat13 <- apply(assay(sce,'counts')[,sce$clus==13],1,function(x){
c(sum(x > 0 & samp=='prd_1'), sum(x > 0 & samp=='pbrd_1'))
})
samp <- sce$Sample[sce$clus==1]
stat1 <- apply(assay(sce,'counts')[,sce$clus==1],1,function(x){
c(sum(x > 0 & samp=='prd_1'), sum(x > 0 & samp=='pbrd_1'))
})
mean(stat13==0)
mean(stat1==0)
head(stat13)
samp <- sce$Sample[sce$clus==13]
stat13 <- t(apply(assay(sce,'counts')[,sce$clus==13],1,function(x){
c(sum(x > 0 & samp=='prd_1'), sum(x > 0 & samp=='pbrd_1'))
}))
samp <- sce$Sample[sce$clus==1]
stat1 <- t(apply(assay(sce,'counts')[,sce$clus==1],1,function(x){
c(sum(x > 0 & samp=='prd_1'), sum(x > 0 & samp=='pbrd_1'))
}))
head(stat1)
head(stat13)
hist(stat1)
hist(stat1,breaks=50)
hist(stat13,breaks=50)
sce <- readRDS('data/sce.rds')
colormap <- function(counts, max = 3871, relative = FALSE, hue=.56, sat=.9){
stopifnot(all(counts%%1==0))
cc <- rep('grey80', length(counts))
#pal <- colorRampPalette(colors = c('grey80', brewer.pal(11,'Spectral')[6:11]))(100)[51:100]
if(relative){
max <- max(c(counts,2))
}
b <- seq(log1p(1), log1p(max), length.out = 31)
nz <- which(counts > 0)
pal <- hsv(hue, sat, seq(1,0, length.out=30))
cc[nz] <- pal[cut(log1p(counts[nz]), breaks = b, include.lowest = TRUE)]
return(cc)
}
feature_plot <- function(sce, gene, reduction = 'umap', hue = .56, sat = .9, ...){
g.idx <- ifelse(is.numeric(gene), gene, which(rownames(sce)==gene))
counts <- assay(sce,'counts')[g.idx,]
nz <- which(counts > 0)
gn <- rownames(sce)[g.idx]
plot(range(reducedDim(sce,reduction)[,1]), range(reducedDim(sce,reduction)[,2]), col = 'white',
xlab='',ylab='', main=gn, asp = 1, ...)
points(reducedDim(sce,reduction)[-nz,], col = alpha('grey80',alpha=.5), cex = .5)
points(reducedDim(sce,reduction)[nz,], col = colormap(counts[nz], relative = FALSE, hue = hue, sat = sat), cex = .5)
}
feature_plot(sce,'ThreePrimeTdTomato', hue = .99)
feature_plot(sce,'EGFP_bGHpA', hue = .35)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# umap plot, colored by cluster
# png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
pal <- colorby(factor(1:lenu(clus)))
# umap plot, colored by cluster
# png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(clus==clID),])
}))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(clus), col = pal, font=2)
text(centers, labels = levels(sce$clus), col = pal, font=2)
png(filename = '~/Desktop/umap.png', width = 1000, height = 1000, res=100)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
dev.off()
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:24, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:22){
barplot(table(clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(clus,sce$Sample))))
}
dev.off()
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:24, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:22){
barplot(table(sce$clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(sce$clus,sce$Sample))))
}
dev.off()
layout(1)
par(mar=c(5,4,4,2)+.1)
sce <- readRDS('data/sce.rds')
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
genes <- c(upgenes, which(rownames(sce) == "EGFP_bGHpA"),
which(rownames(sce) == "ThreePrimeTdTomato"))
genecol <- c(rep(4,length(upgenes)), 3, 2)
means <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean(assay(sce,'logcounts')[gID, which(sce$clus == clID)])
})
})
rownames(means) <- rowData(sce)$Symbol[genes]
pcts <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean((assay(sce,'logcounts')[gID, which(sce$clus == clID)] > 0))
})
})
rownames(pcts) <- rowData(sce)$Symbol[genes]
hc.genes <- hclust(dist(means))
hc.clus <- hclust(dist(t(means)))
means <- means[hc.genes$order, hc.clus$order]
pcts <- pcts[hc.genes$order, hc.clus$order]
genecol <- genecol[hc.genes$order]
#png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
#dev.off()
png(filename = '~/Desktop/dots.png', width = 1000, height = 1000, res=130)
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
dev.off()
de1 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '1')
de13 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '13')
de6 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '6')
de8 <- FindMarkers(seu, ident.1 = 'pbrd_1', group.by = 'Sample', subset.ident = '8')
# volcano plots
volcano_plot <- function(fc, pval, max = 20, ...){
pval <- -log10(pval)
pval[pval > max] <- max
plot(fc, pval, ...)
}
png(filename = '~/Desktop/volcano_1.png', width = 800, height = 800)
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value")
abline(h = -log10(.05), col=2, lty=2)
dev.off()
png(filename = '~/Desktop/volcano_1.png', width = 800, height = 800)
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value", pch=16)
abline(h = -log10(.05), col=2, lty=2)
dev.off()
png(filename = '~/Desktop/volcano_1.png', width = 800, height = 800)
volcano_plot(de1$avg_log2FC, de1$p_val_adj,
main = "Cluster 1", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value", pch=16)
abline(h = -log10(.05), col=2, lty=2)
dev.off()
png(filename = '~/Desktop/volcano_13.png', width = 800, height = 800)
volcano_plot(de13$avg_log2FC, de13$p_val_adj,
main = "Cluster 13", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value", pch=16)
abline(h = -log10(.05), col=2, lty=2)
dev.off()
png(filename = '~/Desktop/volcano_6.png', width = 800, height = 800)
volcano_plot(de6$avg_log2FC, de6$p_val_adj,
main = "Cluster 6", xlab = "log FC (Pbrd - Prd)",
ylab = "FDR-adjusted p-value", pch=16)
abline(h = -log10(.05), col=2, lty=2)
dev.off()
