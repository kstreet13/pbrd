text(centers, labels = levels(sce$clus), col = pal, font=2)
dim(sce)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(log1p(sce$nUMI)), pch=16, main='UMAP - pbrd_1 and prd_1')
summary(log1p(sce$nUMI))
sce <- readRDS('data/sce.rds')
# want full dataset, in case marker genes not included in top 5000
require(DropletUtils)
sceFull <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sceFull) <- left_join(as.data.frame(rowData(sceFull)), genes, join_by(ID == EnsemblID))
rm(genes)
sceFull$nUMI <- colSums(assay(sceFull,'counts'))
sceFull$nGene <- colSums(assay(sceFull,'counts') > 0)
rownames(sce)
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
upgenes
markers <- c("CD34", "PECAM", "CD31", "CDH5", "VE-Cad",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "ERG2", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2", "VEGFR3",
"SCA1", "KIT", "C-KIT", "SLAMF1", "FLK2",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers
head(rowData(sceFull))
for(m in markers){
grep(m, rowData(sceFull)$Symbol)
}
for(m in markers){
print(grep(m, rowData(sceFull)$Symbol))
}
rowData(sceFull)$Symbol
?grep
for(m in markers){
print(grep(m, rowData(sceFull)$Symbol), ignore.case = TRUE)
}
rowData(sceFull)$Symbol
grep('cd3', rowData(sceFull)$Symbol, ignore.case=TRUE)
grep('CD3', rowData(sceFull)$Symbol, ignore.case=TRUE)
markers
grep('CD34', rowData(sceFull)$Symbol, ignore.case=TRUE)
for(m in markers){
print(grep(m, rowData(sceFull)$Symbol), ignore.case = TRUE)
}
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol), ignore.case = TRUE)
}
m
m = markers[1]
m
grep(m, rowData(sceFull)$Symbol, ignore.case=TRUE)
grep("CD34", rowData(sceFull)$Symbol, ignore.case=TRUE)
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE))
}
markers <- c("CD34", "PECAM", "CD31", "CDH5", "VE_Cad",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "ERG2", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2", "VEGFR3",
"SCA1", "KIT", "C_KIT", "SLAMF1", "FLK2",
"EGFP_bGHpA", "ThreePrimeTdTomato")
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE))
}
for(m in markers){
print(m)
print(rowData(sceFull)$Symbol[grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE)])
}
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE, fixed=TRUE))
}
for(m in markers){
print(m)
print(grep(paste0('^', m, '$'),
rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
markers <- c("CD34", "PECAM1", "CD31", "CDH5", "VE_Cad",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "ERG2", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2", "VEGFR3",
"SCA1", "KIT", "C_KIT", "SLAMF1", "FLK2",
"EGFP_bGHpA", "ThreePrimeTdTomato")
for(m in markers){
print(m)
print(grep(paste0('^', m, '$'),
rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE, fixed=TRUE))
}
for(m in markers){
print(m)
print(grep(m, rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
markers <- c("CD34", "PECAM1", "CD31", "CDH5", "VE_Cad",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "ERG2", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2", "VEGFR",
"SCA1", "KIT", "C_KIT", "SLAMF1", "FLK",
"EGFP_bGHpA", "ThreePrimeTdTomato")
for(m in markers){
print(m)
print(grep(paste0('^', m, '$'),
rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
for(m in markers){
print(m)
print(grep(m,
rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
upgenes
sort(upgenes)
for(m in markers){
print(m)
print(grep(paste0('^', m, '$'),
rowData(sceFull)$Symbol, ignore.case = TRUE, value=TRUE))
}
sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers <- c("CD34", "PECAM1", "CDH5",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2",
"SCA1", "KIT", "SLAMF1",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers <- sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers
do.call(c, markers)
markers <- do.call(c, markers)
markers
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
upgenes <- unique(upgenes)
markers <- c("CD34", "PECAM1", "CDH5",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2",
"SCA1", "KIT", "SLAMF1",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers <- sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers <- do.call(c, markers)
markers <- unique(markers)
plot(1:10, col=1:10)
plot(1:10, col=1:10,cex=5)
markers <- c("CD34", "PECAM1", "CDH5",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2",
"SCA1", "KIT", "SLAMF1",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers <- sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers <- do.call(c, markers)
markers <- unique(markers)
markers <- markers[! markers %in% upgenes] # give priority to the unsupervised method
#
markers
genes <- c(upgenes, markers)
genecol <- c(rep(4,length(upgenes)), rep(6,length(markers)-2), 3, 2)
length(genes)
length(genecol)
means <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean(assay(sce,'logcounts')[gID, which(sce$clus == clID)])
})
})
assayNames(sceFull)
plot(log1p(assay(sce,'counts')[1,]), assay(sce,'logcounts')[1,])
abline(0,1)
dim(sce)
dim(sceFull)
?batchCorrect
set.seed(1)
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
# assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
norm <- log1p(1e4*t(t(assay(sce,'counts')) / sce$nUMI))
assay(sce,'logcounts') <- norm
require(batchelor)
sceMNN <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
reducedDim(sce,'mnn') <- reducedDim(sceMNN,'corrected')
rm(sceMNN)
# UMAP
require(Seurat)
# norm <- log1p(1e4*t(t(assay(sce,'counts')) / sce$nUMI))
# assay(sce,'logcounts') <- norm
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'mnn', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
# plot
# ind <- sample(ncol(sce))
# plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
# layout(matrix(1:2,nrow=1))
# plot(reducedDim(sce,'umap'),asp=1, col='grey90')
# points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
# plot(reducedDim(sce,'umap'),asp=1, col='grey90')
# points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
# layout(1)
# looks better than setup_1
ind <- sample(ncol(sce))
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
rm(list=ls())
source('~/mystuff.R')
source('setup_2.R')
set.seed(1)
seu <- as.Seurat(sce)
seu <- FindNeighbors(seu, reduction = "mnn", dims = 1:25)
params <- data.frame(
alg = rep(2:4, each=6),
res = rep(c(.5,.6,.7,.8,.9,1), times=3)
)
clusMat <- sapply(1:nrow(params), function(i){
seu <- FindClusters(seu, algorithm = params$alg[i], resolution = params$res[i])
return(as.numeric(seu$seurat_clusters))
})
for(k in 4:10){
km <- kmeans(reducedDim(sce,'mnn')[,1:25], centers = k)
clusMat <- cbind(clusMat, km$cluster)
}
rm(km)
hc <- hclust(dist(reducedDim(sce,'mnn')[,1:25]))
for(k in 4:10){
clusMat <- cbind(clusMat, cutree(hc, k = k))
}
rm(hc)
big <- apply(clusMat,1,function(x){
apply(clusMat,1,function(y){
mean(x==y)
})
})
h <- hclust(as.dist(1-big))
# which clustering is most consistent with overall agreement?
diag(big) <- NA
within <- apply(clusMat,2,function(cl){
means <- sapply(unique(cl), function(clID){
idx <- which(cl == clID)
return(c(mean(big[idx,idx], na.rm=TRUE), length(idx)))
})
return(sum(means[1,]*means[2,]) / length(cl))
})
between <- apply(clusMat,2,function(cl){
means <- sapply(unique(cl), function(clID){
idx <- which(cl == clID)
return(c(mean(big[idx,-idx], na.rm=TRUE), length(idx)))
})
return(sum(means[1,]*means[2,]) / length(cl))
})
diag(big) <- 1
require(cluster)
d.all <- dist(reducedDim(sce,'mnn')[,1:25])
sil <- apply(clusMat,2,function(cl){
s <- silhouette(as.integer(cl), d.all)
return(mean(s[,'sil_width']))
})
rm(d.all)
require(dbscan)
nn <- kNN(reducedDim(sce,'mnn')[,1:25], k = 20)$id
locAg <- apply(clusMat,2,function(cl){
nnClus <- matrix(cl[nn], ncol=20)
return(mean(cl == nnClus))
})
rm(nn)
# plot(c(1,ncol(clusMat)), 0:1, col='white')
# points(within, col=4)
# points(between, col=2)
# abline(v = which.max(within - between))
# points(sil, col=3)
# points(locAg, col = 5)
# choose the winner
clus <- factor(clusMat[,which.max(within - between + locAg + sil)])
table(clus, sce$Sample)
# umap plot colored by cluster
sce$clus <- clus
# barplots showing breakdown of each cluster by sample
# table(clus, sce$Sample)
# save it, so I don't have to keep re-running all this
saveRDS(sce, file='data/sce.rds')
# co-clustering matrix
#png(filename = '~/Desktop/coclus.png', width = 1000, height = 1000)
image(big[h$order,h$order])
?heatmap
table(sce$clus)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(sce$clus), pch=16, main='UMAP - pbrd_1 and prd_1')
# with cluster labels on top
pal <- colorby(factor(1:lenu(sce$clus)))
centers <- t(sapply(levels(sce$clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(sce$clus==clID),])
}))
legend('topright', legend=levels(sce$clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col=1)
text(centers, labels = levels(sce$clus), col = pal, font=2)
sce <- readRDS('data/sce.rds')
# want full dataset, in case marker genes not included in top 5000
require(DropletUtils)
sceFull <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sceFull) <- left_join(as.data.frame(rowData(sceFull)), genes, join_by(ID == EnsemblID))
rm(genes)
sceFull$nUMI <- colSums(assay(sceFull,'counts'))
sceFull$nGene <- colSums(assay(sceFull,'counts') > 0)
norm <- log1p(1e4*t(t(assay(sceFull,'counts')) / sceFull$nUMI))
assay(sceFull,'logcounts') <- norm
rm(norm)
table(sce$clus)
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
upgenes <- unique(upgenes)
markers <- c("CD34", "PECAM1", "CDH5",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2",
"SCA1", "KIT", "SLAMF1",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers <- sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers <- do.call(c, markers)
markers <- unique(markers)
markers <- markers[! markers %in% upgenes] # give priority to the unsupervised method
genes <- c(upgenes, markers)
genecol <- c(rep(4,length(upgenes)), rep(6,length(markers)-2), 3, 2)
genes
means <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean(assay(sceFull,'logcounts')[gID, which(sce$clus == clID)])
})
})
rownames(means) <- rowData(sce)$Symbol[genes]
pcts <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean((assay(sce,'logcounts')[gID, which(sce$clus == clID)] > 0))
})
})
pcts <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean((assay(sceFull,'logcounts')[gID, which(sce$clus == clID)] > 0))
})
})
upgenes
upgenes <- sapply(unique(sce$clus), function(clID){
idx <- which(sce$clus == clID)
m1 <- rowMeans(assay(sce,'logcounts')[,idx])
m2 <- rowMeans(assay(sce,'logcounts')[,-idx])
return(which.max(m1-m2))
})
upgenes <- unique(rownames(sce)[upgenes])
upgenes
markers <- c("CD34", "PECAM1", "CDH5",
"GJA4", "HEY1", "MECOM", "SOX17", "JAG1",
"EFNB2", "ACKR1", "ICAM1", "LRG1", "SELP",
"PROX1", "LYVE1", "PDPN", "NR2F2",
"SCA1", "KIT", "SLAMF1",
"EGFP_bGHpA", "ThreePrimeTdTomato")
markers <- sapply(markers, function(m){
grep(paste0('^', m, '$'), rowData(sceFull)$Symbol, ignore.case = TRUE)
})
markers <- do.call(c, markers)
markers <- unique(rownames(sceFull)[markers])
markers <- markers[! markers %in% upgenes] # give priority to the unsupervised method
#
markers
genes <- c(upgenes, markers)
genes
genes <- match(c(upgenes, markers), rownames(sceFull))
upgenes
markers
genes
length(genes)
length(upgenes)
length(markers)
genecol <- c(rep(4,length(upgenes)), rep(6,length(markers)-2), 3, 2)
genecol
length(genecol)
means <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean(assay(sceFull,'logcounts')[gID, which(sce$clus == clID)])
})
})
rownames(means) <- rowData(sce)$Symbol[genes]
pcts <- sapply(unique(sce$clus), function(clID){
sapply(genes, function(gID){
mean((assay(sceFull,'logcounts')[gID, which(sce$clus == clID)] > 0))
})
})
rownames(pcts) <- rowData(sce)$Symbol[genes]
means
rownames(means) <- rowData(sceFull)$Symbol[genes]
pcts
rownames(pcts) <- rowData(sceFull)$Symbol[genes]
pcts
hc.genes <- hclust(dist(means))
hc.clus <- hclust(dist(t(means)))
means <- means[hc.genes$order, hc.clus$order]
pcts <- pcts[hc.genes$order, hc.clus$order]
genecol <- genecol[hc.genes$order]
plot(c(1,ncol(means)), c(1,nrow(means)), col='white', asp=1, axes=FALSE, xlab='Cluster', ylab='', main='Potential Marker Genes')
#abline(v = 1:ncol(means), col = 'lightgrey', lty = 2)
#abline(h = 1:nrow(means), col = 'lightgrey', lty = 2)
points(rep(1:ncol(means), each = nrow(means)),
rep(1:nrow(means), times = ncol(means)),
col = alpha(rep(genecol, times = ncol(means)), alpha=as.numeric(pcts)),
cex = 1.8*sqrt(as.numeric(means)),
pch = 16)
axis(1, at=1:ncol(means), labels = unique(sce$clus)[hc.clus$order], cex.axis=.7)
axis(2, at=1:nrow(means), labels = rownames(means), las=1, cex.axis=.6)
plot(c(1,ncol(clusMat)), 0:1, col='white')
points(within, col=4)
points(between, col=2)
abline(v = which.max(within - between + locAg + sil))
points(sil, col=3)
points(locAg, col = 5)
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:24, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:22){
barplot(table(sce$clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(sce$clus,sce$Sample))))
}
?DimPlot
?Ident
?ident
?Idents
?DimPlot
sce
table(sce$clus)
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:24, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:22){
barplot(table(sce$clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(sce$clus,sce$Sample))))
}
length(unique(sce$clus))
png(filename = '~/Desktop/cluster_by_samp.png', width = 1000, height = 1000)
layout(matrix(1:20, ncol=4))
par(mar=c(3,3,3,1))
for(i in 1:length(unique(sce$clus))){
barplot(table(sce$clus, sce$Sample)[i,], col=pal[i],
main=paste('Cluster',i),
ylim = c(0,max(table(sce$clus,sce$Sample))))
}
dev.off()
layout(1)
par(mar=c(5,4,4,2)+.1)
2014-1962
2024-1962
?Seurat::ScaleData
?RunPCA
?Seurat::RunPCA
require(Seurat)
?FindVariableFeatures
?ScaleData
?RunTFIDF
??RunTFIDF
