dim(phat)
phat
length(phat)
scry:::.binomial_deviance_residuals(m, phat, sz)
out <- .Last.value
out
dim(out)
table(sce$Sample)
res[,idx] <- out
length(idx)
dim(out)
dim(res)
any(duplicated(idx))
res[,idx] <- out
length(res[,idx])
length(out)
class(res)
class(out)
res[,idx] <- as.matrix(out)
res <- Matrix(0.0, nrow = nrow(m), ncol = ncol(m))
m = assay(object, assay)
for(b in levels(batch)){
idx <- which(batch == b)
res[, idx] <- .null_residuals(m[, idx], fam = fam, type = type, size_factors = size_factors[idx])
}
for(b in levels(batch)){
idx <- which(batch == b)
res[, idx] <- scry:::.null_residuals(m[, idx], fam = fam, type = type, size_factors = size_factors[idx])
}
res <- matrix(0.0, nrow = nrow(m), ncol = ncol(m))
for(b in levels(batch)){
idx <- which(batch == b)
res[, idx] <- as.matrix(.null_residuals(m[, idx], fam = fam, type = type, size_factors = size_factors[idx]))
}
for(b in levels(batch)){
idx <- which(batch == b)
res[, idx] <- as.matrix(scry:::.null_residuals(m[, idx], fam = fam, type = type, size_factors = size_factors[idx]))
}
rm(list=ls())
source('~/mystuff.R')
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial', batch = factor(sce$Sample))
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000, batch = factor(sce$Sample))
sce
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance')
sce
b=unique(sce$Sample)[1]
b
idx <- which(sce$Sample == b)
nullResiduals(assay(sce,'counts')[,idx], fam = 'binomial', type = 'deviance')
x <- .Last.value
class(x)
corner(x)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
res <- matrix(0.0, nrow = nrow(sce), ncol = ncol(sce))
for(b in unique(sce$Sample)){
idx <- which(sce$Sample == b)
res[,idx] <- as.matrix(nullResiduals(assay(sce,'counts')[,idx], fam = 'binomial', type = 'deviance'))
}
dim(res)
assay(sce,'binomial_deviance_residuals') <- res
sce
rm(res)
rm(x)
rm(b,idx)
pca <- BiocSingular::runPCA(t(assay(sce,'binomial_deviance_residuals')), rank = 50)
reducedDim(sce, 'pca') <- pca$x
rm(pca)
# plot(pca$sdev^2) # 20 looks like enough, maybe 25
# UMAP
require(Seurat)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
assay(sce,'logcounts') <- norm
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'pca', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
ind <- sample(ncol(sce))
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial', batch = factor(sce$Sample))
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000, batch = factor(sce$Sample))
set1 <- rownames(sce)
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
set2 <- rownames(sce)
mean(set1 %in% set2)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
require(batchelor)
sce <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
sce
reducedDim(sce,'pca') <- reducedDim(sce,'corrected')
dim(reducedDim(sce,'pca'))
# UMAP
require(Seurat)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
require(batchelor)
sceMNN <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
sceMNN
reducedDim(sce,'pca') <- reducedDim(sceMNN,'corrected')
rm(sceMNN)
sce
require(Seurat)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
assay(sce,'logcounts') <- norm
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'pca', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
ind <- sample(ncol(sce))
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
layout(matrix(1:2,nrow=1))
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
assay(sce,'logcounts') <- norm
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
#assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
require(batchelor)
sceMNN <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
reducedDim(sce,'pca') <- reducedDim(sceMNN,'corrected')
rm(sceMNN)
# UMAP
require(Seurat)
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'pca', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
ind <- sample(ncol(sce))
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
require(batchelor)
sceMNN <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
reducedDim(sce,'pca') <- reducedDim(sceMNN,'corrected')
rm(sceMNN)
# UMAP
require(Seurat)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
assay(sce,'logcounts') <- norm
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'pca', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
ind <- sample(ncol(sce))
plot(reducedDim(sce,'umap')[ind,],asp=1, col=colorby(sce$Sample[ind], alpha=.5))
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
sce
sce
# setup
require(DropletUtils)
sce <- read10xCounts(c('data/PRD_wk1_filtered_feature_bc_matrix','data/PBRD_wk1_filtered_feature_bc_matrix'),
sample.names = c('prd_1','pbrd_1'))
genes <- read.table('data/m33_gencode_Ens110_annotation.csv', sep = '\t', header = TRUE)
require(dplyr)
rowData(sce) <- left_join(as.data.frame(rowData(sce)), genes, join_by(ID == EnsemblID))
rm(genes)
sce$nUMI <- colSums(assay(sce,'counts'))
sce$nGene <- colSums(assay(sce,'counts') > 0)
# gene filtering
require(scry)
sce <- devianceFeatureSelection(sce, fam = 'binomial')
#plot(sort(rowData(sce)$binomial_deviance, decreasing = TRUE))
#plot(log1p(sort(rowData(sce)$binomial_deviance, decreasing = TRUE)))
sce <- devianceFeatureSelection(sce, fam = 'binomial', nkeep = 5000)
# initial dimred (~PCA)
#sce <- nullResiduals(sce, fam = 'binomial', type = 'deviance', batch = factor(sce$Sample))
assay(sce,'logcounts') <- log1p(assay(sce,'counts'))
require(batchelor)
sceMNN <- batchCorrect(sce, batch = sce$Sample, PARAM = FastMnnParam())
reducedDim(sce,'mnn') <- reducedDim(sceMNN,'corrected')
rm(sceMNN)
# UMAP
require(Seurat)
norm <- log1p(1e4*t(t(assay(sce,'counts')) / colSums(assay(sce,'counts'))))
assay(sce,'logcounts') <- norm
rm(norm)
seu <- as.Seurat(sce)
seu <- RunUMAP(seu, reduction = 'mnn', dims = 1:25)
reducedDim(sce,'umap') <- seu@reductions$umap@cell.embeddings
rm(seu)
?FindClusters
seu <- as.Seurat(sce)
seu <- FindNeighbors(seu, reduction = "mnn", dims = 1:25)
seu <- FindClusters(seu, algorithm = 4, resolution = 0.7)
warnings()
seu$seurat_clusters
seu <- FindClusters(seu, algorithm = 3, resolution = 0.7)
seu <- FindClusters(seu, algorithm = 2, resolution = 0.7)
params <- cbind(
alg = rep(2:4, each=5),
res = rep(c(.5,.75,1,1.5,2), times=3)
)
params
params <- data.frame(
alg = rep(2:4, each=5),
res = rep(c(.5,.75,1,1.5,2), times=3)
)
params
seu <- as.Seurat(sce)
seu <- FindNeighbors(seu, reduction = "mnn", dims = 1:25)
params <- data.frame(
alg = rep(2:4, each=5),
res = rep(c(.5,.75,1,1.5,2), times=3)
)
clusMat <- sapply(1:nrow(params), function(i){
seu <- FindClusters(seu, algorithm = params$alg[i], resolution = params$res[i])
return(seu$seurat_clusters)
})
clusMat
mode(clusmat)
mode(clusMat)
mode(clusMat) <- 'numeric'
clusMat
dim(clusMat)
big <- apply(clusMat,1,function(x){
apply(clusMat,1,function(y){
mean(x==y)
})
})
dim(big)
?hist
corner(big)
?dendrogram
?hclust
h <- hclust(as.dist(1-big))
h$order
image(big[h$order,h$order])
?kmeans
k=4
kmeans(reducedDim(sce,'mnn'), centers = k)
km <- kmeans(reducedDim(sce,'mnn'), centers = k)
km$cluster
dim(clusMat)
for(k in c(4,6,8)){
km <- kmeans(reducedDim(sce,'mnn'), centers = k)
clusMat <- cbind(clusMat, km$cluster)
}
big <- apply(clusMat,1,function(x){
apply(clusMat,1,function(y){
mean(x==y)
})
})
?FindClusters
# source('setup_2.R')
seu <- as.Seurat(sce)
seu <- FindNeighbors(seu, reduction = "mnn", dims = 1:25)
params <- data.frame(
alg = rep(2:4, each=6),
res = rep(c(.5,.6,.7,.8,.9,1), times=3)
)
params
clusMat <- sapply(1:nrow(params), function(i){
seu <- FindClusters(seu, algorithm = params$alg[i], resolution = params$res[i])
return(as.numeric(seu$seurat_clusters))
})
for(k in c(4,6,8)){
km <- kmeans(reducedDim(sce,'mnn'), centers = k)
clusMat <- cbind(clusMat, km$cluster)
}
?outer
install.packages('blockmodeling')
require(blockmodeling)
?genMatrixMult
big <- genMatrixMult(clusMat, t(clusMat), FUNelement = "==", FUNsummary = mean)
genMatrixMult
h <- hclust(as.dist(1-big))
image(big[h$order,h$order])
dim(params)
clusMat <- sapply(1:nrow(params), function(i){
seu <- FindClusters(seu, algorithm = params$alg[i], resolution = params$res[i])
return(as.numeric(seu$seurat_clusters))
})
for(k in 3:8){
km <- kmeans(reducedDim(sce,'mnn'), centers = k)
clusMat <- cbind(clusMat, km$cluster)
}
big <- apply(clusMat,1,function(x){
apply(clusMat,1,function(y){
mean(x==y)
})
})
h <- hclust(as.dist(1-big))
image(big[h$order,h$order])
cutree(h, k = 17)
clus <- cutree(h, k = 17)
table(clus, sce$Sample)
plot(reducedDim(sce,'umap'),asp=1, col=colorby(factor(clus)))
clus <- factor(cutree(h, k = 17))
centers <- t(sapply(levels(clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(clus==clID),])
}))
pal <- colorby(1:lenu(clus))
centers <- t(sapply(levels(clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(clus==clID),])
}))
legend('right', legend=levels(clus), pch=16, col=pal, bty='n')
pal <- colorby(factor(1:lenu(clus)))
centers <- t(sapply(levels(clus), function(clID){
colMeans(reducedDim(sce,'umap')[which(clus==clID),])
}))
legend('right', legend=levels(clus), pch=16, col=pal, bty='n')
points(centers,pch=1,cex=2.5)
points(centers,pch=16,cex=2.5, col='grey80')
text(centers, labels = levels(clus), col = pal, font=2)
layout(matrix(1:2,nrow=1))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='pbrd_1', ], col=alpha(brewer.pal(9,'Set1')[1], alpha=.5))
plot(reducedDim(sce,'umap'),asp=1, col='grey90')
points(reducedDim(sce,'umap')[sce$Sample=='prd_1', ], col=alpha(brewer.pal(9,'Set1')[2], alpha=.5))
layout(1)
#   Data plots for selected GEO samples
library(GEOquery)
BiocManager::install()
BiocManager::install('GEOquery')
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
BiocManager::install('umap')
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE40012", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6947", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
dim(ex)
gset
phenoData(gset)
as.data.frame(phenoData(gset))
phenoData(gset)
pd <- phenoData(gset)
names(pd)
colnames(pd)
pd$gender
as.matrix(pd)
as.DataFrame(pd)
as.data.frame.table(pd)
pd
View(pd)
pd@data
View(pd@data)
class(pd@data)
pd <- phenoData(gset)@data
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0)
if (LogC) { ex[which(ex <= 0)] <- NaN
ex <- log2(ex) }
title <- paste ("GSE40012", "/", annotation(gset), sep ="")
boxplot(ex, boxwex=0.7, notch=T, main=title, outline=FALSE, las=2)
rm(list=ls())
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE36809", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL570", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
#   Data plots for selected GEO samples
library(GEOquery)
library(limma)
library(umap)
# load series and platform data from GEO
gset <- getGEO("GSE20346", GSEMatrix =TRUE, getGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6947", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
ex <- exprs(gset)
ex
require(slinghsot)
BiocManager::install('slingshot')
require(slingshot)
?embedCurves
data("slingshotExample")
rd <- slingshotExample$rd
cl <- slingshotExample$cl
pto <- slingshot(rd, cl, start.clus = '1')
rd2 <- cbind(rd[,2] + rnorm(nrow(rd)), -rd[,1] + rnorm(nrow(rd)))
pto.new <- embedCurves(pto, rd2)
pto.new
plot(rd2, col = cl, asp = 1)
lines(SlingshotDataSet(pto.new), lwd = 3)
lines(SlingshotDataSet(pto.new), type='l', col=2, lwd = 3)
